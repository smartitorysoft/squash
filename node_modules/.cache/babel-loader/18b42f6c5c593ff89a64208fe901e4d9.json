{"ast":null,"code":"import * as React from 'react';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\n\nexport default function useDescriptors({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter\n}) {\n  const [options, setOptions] = React.useState({});\n  const {\n    onDispatchAction,\n    onOptionsChange\n  } = React.useContext(NavigationBuilderContext);\n  const context = React.useMemo(() => ({\n    navigation,\n    onAction,\n    addListener,\n    addKeyedListener,\n    onRouteFocus,\n    onDispatchAction,\n    onOptionsChange\n  }), [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange]);\n  const navigations = useNavigationCache({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter\n  });\n  const routes = useRouteCache(state.routes);\n  return routes.reduce((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n    const routeOptions = { // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null ? screenOptions : // @ts-expect-error: this is a function, but typescript doesn't think so\n      screenOptions({\n        route,\n        navigation\n      })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null ? screen.options : // @ts-expect-error: this is a function, but typescript doesn't think so\n      screen.options({\n        route,\n        navigation\n      })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key]\n    };\n    acc[route.key] = {\n      navigation,\n\n      render() {\n        return /*#__PURE__*/React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, /*#__PURE__*/React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: routeOptions\n        }))));\n      },\n\n      options: routeOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["emitter","React","onOptionsChange","context","navigations","useNavigationCache","routes","useRouteCache","state","screen","screens","route","navigation","routeOptions","screenOptions","options","acc","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={routeOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: routeOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}