{"ast":null,"code":"import * as React from 'react';\n/**\n * Hook which lets child navigators add getters to be called for obtaining rehydrated state.\n */\n\nexport default function useKeyedChildListeners() {\n  const {\n    current: keyedListeners\n  } = React.useRef({\n    getState: {},\n    beforeRemove: {}\n  });\n  const addKeyedListener = React.useCallback((type, key, listener) => {\n    // @ts-expect-error: listener should be correct type according to `type`\n    keyedListeners[type][key] = listener;\n    return () => {\n      // @ts-expect-error: listener should be correct type according to `type`\n      keyedListeners[type][key] = undefined;\n    };\n  }, [keyedListeners]);\n  return {\n    keyedListeners,\n    addKeyedListener\n  };\n}","map":{"version":3,"sources":["useKeyedChildListeners.tsx"],"names":["current","keyedListeners","getState","beforeRemove","addKeyedListener"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAGA;AACA;AACA;;AAEA,eAAe,SAAA,sBAAA,GAAkC;AAC/C,QAAM;AAAEA,IAAAA,OAAO,EAAEC;AAAX,MAA8B,KAAK,CAAL,MAAA,CAOlC;AACAC,IAAAA,QAAQ,EADR,EAAA;AAEAC,IAAAA,YAAY,EAAE;AAFd,GAPkC,CAApC;AAYA,QAAMC,gBAAgB,GAAG,KAAK,CAAL,WAAA,CACvB,CAAA,IAAA,EAAA,GAAA,EAAA,QAAA,KAIK;AACH;AACAH,IAAAA,cAAc,CAAdA,IAAc,CAAdA,CAAAA,GAAAA,IAAAA,QAAAA;AAEA,WAAO,MAAM;AACX;AACAA,MAAAA,cAAc,CAAdA,IAAc,CAAdA,CAAAA,GAAAA,IAAAA,SAAAA;AAFF,KAAA;AATqB,GAAA,EAcvB,CAdF,cAcE,CAduB,CAAzB;AAiBA,SAAO;AAAA,IAAA,cAAA;AAELG,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import * as React from 'react';\nimport type { KeyedListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add getters to be called for obtaining rehydrated state.\n */\n\nexport default function useKeyedChildListeners() {\n  const { current: keyedListeners } = React.useRef<\n    {\n      [K in keyof KeyedListenerMap]: Record<\n        string,\n        KeyedListenerMap[K] | undefined\n      >;\n    }\n  >({\n    getState: {},\n    beforeRemove: {},\n  });\n\n  const addKeyedListener = React.useCallback(\n    <T extends keyof KeyedListenerMap>(\n      type: T,\n      key: string,\n      listener: KeyedListenerMap[T]\n    ) => {\n      // @ts-expect-error: listener should be correct type according to `type`\n      keyedListeners[type][key] = listener;\n\n      return () => {\n        // @ts-expect-error: listener should be correct type according to `type`\n        keyedListeners[type][key] = undefined;\n      };\n    },\n    [keyedListeners]\n  );\n\n  return {\n    keyedListeners,\n    addKeyedListener,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}