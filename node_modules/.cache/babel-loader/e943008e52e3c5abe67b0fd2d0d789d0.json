{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nconst TYPE_ROUTE = 'route';\nexport const TabActions = {\n  jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name,\n        params\n      }\n    };\n  }\n\n};\n\nconst getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n  const history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n\n      break;\n\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n\n      break;\n\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n\n      break;\n\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (state, index, backBehavior, initialRouteName) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n    history = state.history.filter(it => it.type === 'route' ? it.key !== currentKey : false).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n\n  return { ...state,\n    index,\n    history\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'history'\n}) {\n  const router = { ...BaseRouter,\n    type: 'tab',\n\n    getInitialState({\n      routeNames,\n      routeParamList\n    }) {\n      const index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      const routes = routeNames.map(name => ({\n        name,\n        key: \"\".concat(name, \"-\").concat(nanoid()),\n        params: routeParamList[name]\n      }));\n      const history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat(nanoid()),\n        index,\n        routeNames,\n        history,\n        routes\n      };\n    },\n\n    getRehydratedState(partialState, {\n      routeNames,\n      routeParamList\n    }) {\n      var _state$routes, _state$index, _state$history$filter, _state$history;\n\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map(name => {\n        const route = state.routes.find(r => r.name === name);\n        return { ...route,\n          name,\n          key: route && route.name === name && route.key ? route.key : \"\".concat(name, \"-\").concat(nanoid()),\n          params: routeParamList[name] !== undefined ? { ...routeParamList[name],\n            ...(route ? route.params : undefined)\n          } : route ? route.params : undefined\n        };\n      });\n      const index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state === null || state === void 0 ? void 0 : state.index) !== null && _state$index !== void 0 ? _state$index : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      const history = (_state$history$filter = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(it => routes.find(r => r.key === it.key))) !== null && _state$history$filter !== void 0 ? _state$history$filter : [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat(nanoid()),\n        index,\n        routeNames,\n        history,\n        routes\n      }, index, backBehavior, initialRouteName);\n    },\n\n    getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList\n    }) {\n      const routes = routeNames.map(name => state.routes.find(r => r.name === name) || {\n        name,\n        key: \"\".concat(name, \"-\").concat(nanoid()),\n        params: routeParamList[name]\n      });\n      const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      let history = state.history.filter( // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n      it => it.type !== 'route' || routes.find(r => r.key === it.key));\n\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n\n      return { ...state,\n        history,\n        routeNames,\n        routes,\n        index\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, {\n      routeParamList\n    }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            let index = -1;\n\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(route => route.key === action.payload.key);\n            } else {\n              index = state.routes.findIndex(route => route.name === action.payload.name);\n            }\n\n            if (index === -1) {\n              return null;\n            }\n\n            return changeIndex({ ...state,\n              routes: action.payload.params !== undefined ? state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n\n                let params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge === false) {\n                  params = routeParamList[route.name] !== undefined ? { ...routeParamList[route.name],\n                    ...action.payload.params\n                  } : action.payload.params;\n                } else {\n                  params = action.payload.params ? { ...route.params,\n                    ...action.payload.params\n                  } : route.params;\n                }\n\n                return params !== route.params ? { ...route,\n                  params\n                } : route;\n              }) : state.routes\n            }, index, backBehavior, initialRouteName);\n          }\n\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n\n            const previousKey = state.history[state.history.length - 2].key;\n            const index = state.routes.findIndex(route => route.key === previousKey);\n\n            if (index === -1) {\n              return null;\n            }\n\n            return { ...state,\n              history: state.history.slice(0, -1),\n              index\n            };\n          }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions\n  };\n  return router;\n}","map":{"version":3,"sources":["TabRouter.tsx"],"names":["TYPE_ROUTE","TabActions","jumpTo","type","payload","params","getRouteHistory","history","key","routes","i","index","initialRouteIndex","route","changeIndex","backBehavior","currentKey","state","it","router","getInitialState","routeParamList","initialRouteName","routeNames","name","nanoid","stale","getRehydratedState","r","undefined","Math","getStateForRouteNamesChange","getStateForRouteFocus","getStateForAction","action","previousKey","BaseRouter","shouldActionChangeFocus","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport type {\n  NavigationState,\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior =\n  | 'initialRoute'\n  | 'firstRoute'\n  | 'history'\n  | 'order'\n  | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\n  NavigationState<ParamList>,\n  'history'\n> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key,\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState<ParamListBase>,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'history',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (state as PartialState<\n          TabNavigationState<ParamListBase>\n        >).routes.find((r) => r.name === name);\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\n        routes.length - 1\n      );\n\n      const history =\n        state.history?.filter((it) => routes.find((r) => r.key === it.key)) ??\n        [];\n\n      return changeIndex(\n        {\n          stale: false,\n          type: 'tab',\n          key: `tab-${nanoid()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n        },\n        index,\n        backBehavior,\n        initialRouteName\n      );\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find((r) => r.name === name) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, { routeParamList }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes:\n                action.payload.params !== undefined\n                  ? state.routes.map((route, i) => {\n                      if (i !== index) {\n                        return route;\n                      }\n\n                      let params;\n\n                      if (\n                        action.type === 'NAVIGATE' &&\n                        action.payload.merge === false\n                      ) {\n                        params =\n                          routeParamList[route.name] !== undefined\n                            ? {\n                                ...routeParamList[route.name],\n                                ...action.payload.params,\n                              }\n                            : action.payload.params;\n                      } else {\n                        params = action.payload.params\n                          ? {\n                              ...route.params,\n                              ...action.payload.params,\n                            }\n                          : route.params;\n                      }\n\n                      return params !== route.params\n                        ? { ...route, params }\n                        : route;\n                    })\n                  : state.routes,\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}