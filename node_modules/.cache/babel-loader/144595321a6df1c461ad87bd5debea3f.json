{"ast":null,"code":"import * as React from 'react';\nimport { Text, Platform } from 'react-native';\nimport useLinkProps from './useLinkProps';\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\n\nexport default function Link({\n  to,\n  action,\n  ...rest\n}) {\n  const props = useLinkProps({\n    to,\n    action\n  });\n\n  const onPress = e => {\n    if ('onPress' in rest) {\n      var _rest$onPress;\n\n      (_rest$onPress = rest.onPress) === null || _rest$onPress === void 0 ? void 0 : _rest$onPress.call(rest, e);\n    }\n\n    props.onPress(e);\n  };\n\n  return /*#__PURE__*/React.createElement(Text, { ...props,\n    ...rest,\n    ...Platform.select({\n      web: {\n        onClick: onPress\n      },\n      default: {\n        onPress\n      }\n    })\n  });\n}","map":{"version":3,"sources":["Link.tsx"],"names":["rest","props","useLinkProps","action","onPress","e","web","onClick","default"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,IAAA,EAAA,QAAA,QAAA,cAAA;AAEA,OAAA,YAAA,MAAA,gBAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAAA,IAAA,CAAc;AAAA,EAAA,EAAA;AAAA,EAAA,MAAA;AAAc,KAAGA;AAAjB,CAAd,EAA8C;AAC3D,QAAMC,KAAK,GAAGC,YAAY,CAAC;AAAA,IAAA,EAAA;AAAMC,IAAAA;AAAN,GAAD,CAA1B;;AAEA,QAAMC,OAAO,GACXC,CADc,IAEX;AACH,QAAI,aAAJ,IAAA,EAAuB;AAAA,UAAA,aAAA;;AACrB,OAAA,aAAA,GAAA,IAAI,CAAJ,OAAA,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AACD;;AAEDJ,IAAAA,KAAK,CAALA,OAAAA,CAAAA,CAAAA;AAPF,GAAA;;AAUA,SAAA,aAAO,KAAK,CAAL,aAAA,CAAA,IAAA,EAA0B,EAC/B,GAD+B,KAAA;AAE/B,OAF+B,IAAA;AAG/B,OAAG,QAAQ,CAAR,MAAA,CAAgB;AACjBK,MAAAA,GAAG,EAAE;AAAEC,QAAAA,OAAO,EAAEH;AAAX,OADY;AAEjBI,MAAAA,OAAO,EAAE;AAAEJ,QAAAA;AAAF;AAFQ,KAAhB;AAH4B,GAA1B,CAAP;AAQD","sourcesContent":["import * as React from 'react';\nimport { Text, TextProps, GestureResponderEvent, Platform } from 'react-native';\nimport type { NavigationAction } from '@react-navigation/core';\nimport useLinkProps from './useLinkProps';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link({ to, action, ...rest }: Props) {\n  const props = useLinkProps({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}