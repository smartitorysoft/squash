{"ast":null,"code":"import * as React from 'react';\nimport { getStateFromPath as getStateFromPathDefault, getPathFromState as getPathFromStateDefault, getActionFromState as getActionFromStateDefault } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport ServerContext from './ServerContext';\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items = []; // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n\n  const pending = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach(it => {\n      const cb = it.cb;\n\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index() {\n      var _window$history$state; // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n\n\n      const id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n\n      if (id) {\n        const index = items.findIndex(item => item.id === id);\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index) {\n      return items[index];\n    },\n\n    backIndex({\n      path\n    }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({\n      path,\n      state\n    }) {\n      interrupt();\n      const id = nanoid(); // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n\n      items = items.slice(0, index + 1);\n      items.push({\n        path,\n        state,\n        id\n      });\n      index = items.length - 1; // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n\n      window.history.pushState({\n        id\n      }, '', path);\n    },\n\n    replace({\n      path,\n      state\n    }) {\n      var _window$history$state2, _window$history$state3;\n\n      interrupt();\n      const id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n\n      if (items.length) {\n        items[index] = {\n          path,\n          state,\n          id\n        };\n      } else {\n        // This is the first time any state modifications are done\n        // So we need to push the entry as there's nothing to replace\n        items.push({\n          path,\n          state,\n          id\n        });\n      }\n\n      window.history.replaceState({\n        id\n      }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n) {\n      interrupt();\n\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the 0 index\n        // Otherwise we'll exit the page\n        n = index + n < 0 ? -index : n;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n; // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n\n      return new Promise((resolve, reject) => {\n        const done = interrupted => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          } // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n\n\n          const {\n            title\n          } = window.document;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n\n        pending.push({\n          ref: done,\n          cb: done\n        }); // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n\n        const timer = setTimeout(() => {\n          const index = pending.findIndex(it => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n      return () => window.removeEventListener('popstate', onPopState);\n    }\n\n  };\n  return history;\n};\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\n\n\nconst findMatchingState = (a, b) => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  } // Tab and drawer will have `history` property, but stack will have history in `routes`\n\n\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n  const aChildState = aRoute.state;\n  const bChildState = bRoute.state; // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n/**\n * Run async function in series as it's called.\n */\n\n\nconst series = cb => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n        last === null || last === void 0 ? void 0 : last();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet isUsingLinking = false;\nexport default function useLinking(ref, {\n  enabled = true,\n  config,\n  getStateFromPath = getStateFromPathDefault,\n  getPathFromState = getPathFromStateDefault,\n  getActionFromState = getActionFromStateDefault\n}) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(['Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:', \"- You are not using both 'linking' prop and 'useLinking'\", \"- You don't have 'useLinking' in multiple components\"].join('\\n').trim());\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n  const [history] = React.useState(createMemoryHistory); // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n    getPathFromStateRef.current = getPathFromState;\n  });\n  const server = React.useContext(ServerContext);\n  const getInitialState = React.useCallback(() => {\n    let value;\n\n    if (enabledRef.current) {\n      var _server$location;\n\n      const location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n\n      catch() {\n        return thenable;\n      }\n\n    };\n    return thenable; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const previousIndexRef = React.useRef(undefined);\n  const previousStateRef = React.useRef(undefined);\n  const pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n    return history.listen(() => {\n      var _previousIndexRef$cur;\n\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n      const previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path; // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n\n      const record = history.get(index);\n\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current); // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some(r => !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name)))) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\"An error occurred when trying to handle the link '\".concat(path, \"': \").concat(e.message));\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(() => {\n    var _ref$current;\n\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const path = getPathFromStateRef.current(state, configRef.current);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({\n          path,\n          state\n        });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n      const pendingPath = pendingPopStatePathRef.current;\n      const path = getPathFromStateRef.current(state, configRef.current);\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined; // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n\n      if (previousFocusedState && focusedState && // We should only handle push/pop if path changed from what was in last `popstate`\n      // Otherwise it's likely a change triggered by `popstate`\n      path !== pendingPath) {\n        const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({\n            path,\n            state\n          });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n          const nextIndex = history.backIndex({\n            path\n          });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            } // Store the updated state as well as fix the path if incorrect\n\n\n            history.replace({\n              path,\n              state\n            });\n          } catch (e) {// The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({\n            path,\n            state\n          });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({\n          path,\n          state\n        });\n      }\n    }; // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState\n  };\n}","map":{"version":3,"sources":["useLinking.tsx"],"names":["getStateFromPath","getPathFromState","getActionFromState","createMemoryHistory","index","items","pending","interrupt","it","cb","history","id","window","item","get","backIndex","path","i","push","state","nanoid","replace","go","n","Math","done","interrupted","clearTimeout","reject","title","resolve","ref","timer","setTimeout","onPopState","last","listen","listener","findMatchingState","a","b","aHistoryLength","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","handling","queue","callback","isUsingLinking","enabled","getActionFromStateDefault","React","enabledRef","configRef","getStateFromPathRef","getActionFromStateRef","getPathFromStateRef","server","getInitialState","location","value","thenable","then","Promise","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","navigation","previousIndex","record","rootState","r","console","action","e","onStateChange","previousState","pendingPath","previousFocusedState","historyDelta","focusedState","nextIndex","currentIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath as getStateFromPathDefault,\n  getPathFromState as getPathFromStateDefault,\n  getActionFromState as getActionFromStateDefault,\n  NavigationContainerRef,\n  NavigationState,\n} from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (items.length) {\n        items[index] = { path, state, id };\n      } else {\n        // This is the first time any state modifications are done\n        // So we need to push the entry as there's nothing to replace\n        items.push({ path, state, id });\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the 0 index\n        // Otherwise we'll exit the page\n        n = index + n < 0 ? -index : n;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n};\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You are not using both 'linking' prop and 'useLinking'\",\n          \"- You don't have 'useLinking' in multiple components\",\n        ]\n          .join('\\n')\n          .trim()\n      );\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n    getPathFromStateRef.current = getPathFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${e.message}`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const path = getPathFromStateRef.current(state, configRef.current);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}